# -*- coding: utf-8 -*-
"""Restaurant Reviews Classification using BOW model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_aPzbIbAYcOslTzq_w-03GDAjTpp0Bdp

# Restaurant Reviews Classification with NLTK

## Business Problem
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

data = pd.read_csv("Restaurant_Reviews.tsv", sep='\t', quoting=3)

data.head()

data.tail()

data['Liked'].value_counts()

"""## Cleaning Text Data"""

import nltk 
import re

nltk.download('stopwords')

from nltk.corpus import stopwords

data['Review'][0]

review = re.sub('[^a-zA-Z]', ' ', data['Review'][0])

review

review = review.lower()

review

review = review.split()

review

stopwords.words('english')

preview = []
for word in review:
  if word not in stopwords.words('english'):
    preview.append(word)

preview

review = [word for word in review if word not in stopwords.words('english')]

review

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

review = [ps.stem(word) for word in review]

review

review = " ".join(review)

print(review)

corpus = []

ps = PorterStemmer()

for i in range(len(data)):
  
  review = re.sub('[^a-zA-Z]', ' ', data['Review'][i])
  review = review.lower()
  review = review.split()
  review = [ps.stem(word) for word in review if word not in stopwords.words('english')]
  review = " ".join(review)

  corpus.append(review)

print(corpus)

"""## Bag of Word Model"""

from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer(max_features=1500)

x = cv.fit_transform(corpus).toarray()

x.shape

y = data.iloc[:, 1].values

y.shape

y[:10]

"""## Apply Naive Bayes Algorithm"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)

x_train.shape, x_test.shape

y_train.shape, y_test.shape

from sklearn.naive_bayes import GaussianNB

classifier  = GaussianNB()

classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

from sklearn.metrics import accuracy_score

accuracy_score(y_test, y_pred)

200 * 0.73